# SC MPS Display  

## Directory Structure  
```
.  
|-- README  
|-- RELEASE_NOTES  
|-- sc_mps_gui.bash  
|  
`-- gui/  
    |-- mps_gui_main.ui  
    |-- mps_gui_main.py  
    |  
    |-- mixins/  
    |   |-- __init__.py  
    |   |-- summary.py  
    |   |-- logic.py  
    |   |-- selection_detail.py  
    |   `-- recent_faults.py  
    |  
    |-- models/  
    |   |-- __init__.py  
    |   |-- mps_model.py  
    |   |-- logic_model.py
    |   `-- recent_faults_model.py
    |  
    `-- resources/  
        |-- __init__.py  
        |-- mps_permit_panel.ui  
        `-- lcls_mps_lockup_sidebyside_digital.png  
```


### sc_mps_gui.bash  
  - Run the MPS Display with the specified DB file (if one is specified)  
  - Usage:  
    `` sc_mps_gui.bash [filename] ``  

  - Examples:  
    `` sc_mps_gui.bash ``  
    `` sc_mps_gui.bash faults.db ``  


### mps_gui_main.py & mps_gui_main.ui  
  - This is the main display for the SC MPS Display  
  - Contains a tab widget with 3 tabs:  
    - The Summary tab contains 6 embedded displays, 2 'check engine lights', and 2 tables, one containing faulted PVs and one containing bypassed faults  
    - The Logic tab contains a table of all faults in the database  
      - The searchbar shows only faults containing that substring  
      - The checkbox shows the user all inactive faults  
      - Selecting a fault opens a panel with more details on that fault  
    - The Recent Faults tab shows the user the fault history and allows the user to sort or open the fault in the Logic tab


### summary.py  
  - This file contains a python mixin to manage the Summary tab  
  - Manage the faults table and the bypass table  
  - Minor interactions with Logic tab:  
    - On fault status change and/or bypass status change, alter the associated cell in Logic tab table  
    - When a fault is right-clicked, present an option to open the fault in the Logic tab


### logic.py  
  - This file contains a python mixin to manage the Logic tab  
  - Manage the logic table and open a details pane when a fault is selected  
  - Allow for searching and sorting in the main table  
  - Allow the user to filter out all inactive faults
  - Faults can be bypassed from the selection details pane  


### selection_detail.py  
  - Manage the Selection Details section used in the Logic tab  
  - The section is shown and populated when a selection is made in the logic table  
  - Details shown:  
    - Name  
    - Current State  
    - Ignore Conditions  
    - Truth Table  
    - PV Table  


### recent_faults.py  
  - Show faults from recent history using the mps_history package
  - Allow the user to filter by inputted text


### mps_model.py  
  - Using MPSConfig, establish a connection to the MPS Database  
    - If a filename is not provided, then MPSModel will locate the default file to use  
  - The object stores all necessary information from the database  


### logic_model.py  
  - Create a custom QAbstractTableModel, QSortFilterProxyModel, and QStyledItemDelegate for use in the Logic tab and Summary tab  


### recent_faults_model.py  
  - Create a custom QAbstractTableModel, QSortFilterProxyModel, and QStyledItemDelegate for use in the Recent Faults tab


### mps_permit_panel.ui  
  - The permit panel display embedded in the Summary tab  
  - Shows the Beam Class, Timing Beam Class, and Timing Rate  


### lcls_mps_lockup_sidebyside_digital.png
  - A standard-use image to tell the user this application is a part of the SC MPS  
